## General Notes for Daniel

* More TODOs have been added 

* Start with db_handling.py TODOs

* Go over each function you made and see if you did what was expected by rereading the docstring. 
For example, feedback_for_chef() in customer_operations.py is supposed to add 1 or 2 rows based on the type of customer they are but you only add 1 row always

* Also, whenever I mention that arguments are "not guaranteed to match conditions", that means that you have to check if those arguments actually exist 
For example, if a username_of_chef is not guaranteed to match conditions, then you check in the Accounts table to see if the username passed exists as a chef 
I'm not pointing to a specific error you made, but I am giving an example so that you understand what I mean by something matching and not matching conditions. 
I'm not sure if you made errors or not.

* For every table we changed, the functions where we view those tables might need change so we need to change those view functions as well (make sure each view function doesn't miss out on columns unless specified otherwise by the docstring)
For instance, we changed the Deliveries table columns so view_deliveries() would need modification since it would be missing a column 
Do this similarly for other view functions that you implemented

* For later (when you have nothing else to do): to the best of your ability, try to make sure your implementations are correct for each function

* Make sure in all the files you worked with none of the functions are left unimplemented

################################################## customer_operations.py ##################################################

def complaints_for_customers(complainer, complained, complaint): 
    # TODO: remember to check if the complainer is a VC because if they are then you should add two rows (instead of 1) since their complaints count twice as much

def feedback_for_chef(username_of_customer, username_of_chef, complaint_or_compliment, feedback):
    # TODO: remember that the TODO there that says for later can be done when everything else is done
    # TODO: remember to check if the username_of_customer is a VC because if they are then you should add two rows (instead of 1) since their complaints count twice as much

def feedback_for_delivery(username_of_customer, username_of_delivery, complaint_or_compliment, feedback):
    # TODO (for later, when everything else is done): Daniel, make sure delivery person actually made a delivery to customer before by checking Deliveries table (return false if no delivery was made)
    # (for now we can assume managers will approve/disapprove and they will take care of this)

    # TODO: remember to check if the complainer is a VC because if they are then you should add two rows (instead of 1) since their complaints count twice as much

def make_order(username, delivery_or_pickup, address):
    # TODO: you pass in strings into the update statements, will SQL be able to recognize that they are actually numbers and not strings? if not, then it will try to add a number with a string
    # TODO: Daniel, you check if the total in the cart is more than $500 when you should actually be checking the total spent so far (found in the table)
    # TODO: Daniel, you never check to see if they made more than 50 orders (if they have spent more than $500 so far OR have made 50 orders so far, then they are promoted to VC)

